{"version":3,"file":"static/js/944.efc56ee8.chunk.js","mappings":"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","sources":["components/AlertMessage.js","components/EditUserStory.js","components/ConfirmWindow.js","components/Card.js","components/Navbar.js","firebase.config.js","server/index.js"],"sourcesContent":["import React from 'react';\r\nimport { Alert, AlertIcon, AlertTitle, CloseButton } from '@chakra-ui/react';\r\n\r\nconst AlertMessage = ({ message, handleClose }) => {\r\n    return (\r\n        <div style={{ marginTop: '30px', borderRadius: '10px' }}>\r\n            <Alert status=\"error\">\r\n                <AlertIcon />\r\n                <AlertTitle mr={2}>{message}</AlertTitle>\r\n                {/* <AlertDescription>\r\n                    Your Chakra experience may be degraded.\r\n                </AlertDescription> */}\r\n                <CloseButton\r\n                    onClick={handleClose}\r\n                    position=\"absolute\"\r\n                    right=\"8px\"\r\n                    top=\"8px\"\r\n                />\r\n            </Alert>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlertMessage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    FormControl,\r\n    Input,\r\n    FormLabel,\r\n    Textarea,\r\n    Radio,\r\n    RadioGroup,\r\n    HStack,\r\n    Button,\r\n} from '@chakra-ui/react';\r\nimport '../App.css';\r\n\r\nconst EditUserStory = ({\r\n    story,\r\n    newStory,\r\n    setNewStory,\r\n    submitEditStory,\r\n    editButtonLoading,\r\n}) => {\r\n    const [isAllField, setIsAllField] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            story.heading === newStory.heading &&\r\n            story.content === newStory.content &&\r\n            story.type === newStory.type\r\n        )\r\n            setIsAllField(false);\r\n        else setIsAllField(true);\r\n    }, [story, newStory]);\r\n\r\n    return (\r\n        <div>\r\n            <FormControl isRequired>\r\n                <FormLabel htmlFor=\"story-heading\">Heading</FormLabel>\r\n                <Input\r\n                    id=\"story-heading\"\r\n                    type=\"text\"\r\n                    placeholder=\"Your story heading...\"\r\n                    value={newStory.heading}\r\n                    onChange={e =>\r\n                        setNewStory({ ...newStory, heading: e.target.value })\r\n                    }\r\n                />\r\n                <FormLabel htmlFor=\"story-content\">Content</FormLabel>\r\n                <Textarea\r\n                    placeholder=\"Your story content...\"\r\n                    value={newStory.content}\r\n                    onChange={e =>\r\n                        setNewStory({ ...newStory, content: e.target.value })\r\n                    }\r\n                />\r\n                <FormLabel>Want to change story cover image?</FormLabel>\r\n                <Input type={'file'} />\r\n                <FormLabel as=\"legend\">Select your story privacy</FormLabel>\r\n                <RadioGroup\r\n                    defaultValue={newStory.type}\r\n                    onChange={value =>\r\n                        setNewStory({ ...newStory, type: value })\r\n                    }\r\n                >\r\n                    <HStack spacing=\"24px\">\r\n                        <Radio value=\"public\">Public</Radio>\r\n                        <Radio value=\"private\">Private</Radio>\r\n                    </HStack>\r\n                </RadioGroup>\r\n                {/* <FormHelperText>Default story type is Public</FormHelperText> */}\r\n                <Button\r\n                    isLoading={editButtonLoading}\r\n                    disabled={!isAllField}\r\n                    colorScheme=\"teal\"\r\n                    variant=\"solid\"\r\n                    onClick={submitEditStory}\r\n                >\r\n                    Edit story\r\n                </Button>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditUserStory;\r\n","import { Heading, Stack, HStack, Button } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport '../App.css';\r\n\r\nconst ConfirmWindow = ({ cancelDeleteProcess, deleteStory, isLoading }) => {\r\n    return (\r\n        <div>\r\n            <Stack>\r\n                <Heading className=\"confirm-window-heading\">\r\n                    Are you sure to delete this story?\r\n                </Heading>\r\n                <div>\r\n                    <HStack>\r\n                        <Button\r\n                            onClick={cancelDeleteProcess}\r\n                            colorScheme={'green'}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            onClick={deleteStory}\r\n                            colorScheme={'red'}\r\n                            isLoading={isLoading}\r\n                        >\r\n                            Delete Story\r\n                        </Button>\r\n                    </HStack>\r\n                </div>\r\n            </Stack>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ConfirmWindow;\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport {\r\n    HStack,\r\n    Badge,\r\n    Stack,\r\n    VStack,\r\n    Heading,\r\n    Button,\r\n    Divider,\r\n    Image,\r\n    useMediaQuery,\r\n} from '@chakra-ui/react';\r\nimport '../App.css';\r\nimport { AiFillLike, AiFillDislike } from 'react-icons/ai';\r\nimport {\r\n    query,\r\n    collection,\r\n    where,\r\n    getDocs,\r\n    deleteDoc,\r\n    doc,\r\n    updateDoc,\r\n} from 'firebase/firestore';\r\nimport { db, stringDate } from '../server';\r\nimport AlertMessage from './AlertMessage';\r\nimport { RootContext } from '../context';\r\nimport Modal from 'react-modal';\r\nimport EditUserStory from './EditUserStory';\r\nimport ConfirmWindow from './ConfirmWindow';\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst Card = ({ story, type }) => {\r\n    const state = useContext(RootContext);\r\n    const [like, setLike] = useState({ count: 0, state: 'Like' });\r\n    const [alert, setAlert] = useState({ visible: false, message: '' });\r\n    const [buttonLoading, setButtonLoading] = useState({\r\n        edit: false,\r\n        delete: false,\r\n    });\r\n    const [newStory, setNewStory] = useState({\r\n        heading: story.heading,\r\n        content: story.content,\r\n        type: story.type,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setLike({ ...like, count: story.likes });\r\n    }, []);\r\n\r\n    const handleLike = async () => {\r\n        if (like.state === 'Like') {\r\n            setLike({ state: 'Dislike', count: like.count + 1 });\r\n            const updateStoryId = await fetchStoryDocumentId(story.storyId);\r\n            await updateDoc(doc(db, 'stories', updateStoryId), {\r\n                likes: story.likes + 1,\r\n            });\r\n        }\r\n        if (like.state === 'Dislike')\r\n            setLike({ state: 'Like', count: like.count - 1 });\r\n        const updateStoryId = await fetchStoryDocumentId(story.storyId);\r\n        await updateDoc(doc(db, 'stories', updateStoryId), {\r\n            likes: story.likes - 1,\r\n        });\r\n    };\r\n\r\n    // fetch firestore document ID\r\n    const fetchStoryDocumentId = async id => {\r\n        try {\r\n            const docs = await getDocs(\r\n                query(collection(db, 'stories'), where('storyId', '==', id))\r\n            );\r\n            const deleteStoryId = docs.docs[0].id;\r\n            return deleteStoryId;\r\n        } catch (error) {\r\n            setAlert({ visible: true, message: error.message });\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    // to delete story\r\n    const handleDeleteStory = () => {\r\n        setModalType('delete');\r\n        setModalIsOpen(true);\r\n    };\r\n\r\n    const deleteStory = async () => {\r\n        setButtonLoading({ ...buttonLoading, delete: true });\r\n        try {\r\n            const deleteStoryId = await fetchStoryDocumentId(story.storyId);\r\n            await deleteDoc(doc(db, 'stories', deleteStoryId));\r\n            const filterStories = state.rootStories.filter(\r\n                item => item.storyId !== story.storyId\r\n            );\r\n            state.setRootStories([...filterStories]);\r\n            setModalIsOpen(false);\r\n            setButtonLoading({ ...buttonLoading, delete: false });\r\n        } catch (error) {\r\n            setAlert({ visible: true, message: error.message });\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    // cancel delete a story\r\n    const cancelDeleteProcess = () => {\r\n        setModalIsOpen(false);\r\n    };\r\n\r\n    // to edit story\r\n    const handleEditStory = () => {\r\n        setModalType('edit');\r\n        setModalIsOpen(true);\r\n    };\r\n\r\n    const submitEditStory = async () => {\r\n        setButtonLoading({ ...buttonLoading, edit: true });\r\n        try {\r\n            const editStoryId = await fetchStoryDocumentId(story.storyId);\r\n            const object = newStory;\r\n            object.createdAt = stringDate('u');\r\n            object.timestamp = Date.now();\r\n            await updateDoc(doc(db, 'stories', editStoryId), object);\r\n            // update local\r\n            const filterStories = state.rootStories.map(item => {\r\n                if (story.storyId === item.storyId) {\r\n                    item = { ...item, ...object };\r\n                    return item;\r\n                }\r\n                return item;\r\n            });\r\n\r\n            state.setRootStories([...filterStories]);\r\n            setButtonLoading({ ...buttonLoading, edit: false });\r\n            setModalIsOpen(false);\r\n        } catch (error) {\r\n            setAlert({ visible: true, message: error.message });\r\n            console.log(error);\r\n        }\r\n        // console.log(newStory);\r\n    };\r\n\r\n    // for responsive\r\n    const [isResponsive] = useMediaQuery('(min-width: 1000px)');\r\n\r\n    // modal states\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n    const [modalType, setModalType] = useState('');\r\n    const closeModal = () => setModalIsOpen(false);\r\n\r\n    // modal style\r\n    const customStyles = {\r\n        content: {\r\n            width: isResponsive ? '600px' : 'auto',\r\n            top: '50%',\r\n            left: '50%',\r\n            right: 'auto',\r\n            bottom: 'auto',\r\n            marginRight: '-50%',\r\n            transform: 'translate(-50%, -50%)',\r\n        },\r\n        overlay: {\r\n            position: 'fixed',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            backgroundColor: 'rgba(0, 0, 0, 0.75)',\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                isOpen={modalIsOpen}\r\n                onRequestClose={closeModal}\r\n                style={customStyles}\r\n                contentLabel=\"Example Modal\"\r\n            >\r\n                {modalType === 'edit' && (\r\n                    <EditUserStory\r\n                        story={story}\r\n                        newStory={newStory}\r\n                        setNewStory={setNewStory}\r\n                        submitEditStory={submitEditStory}\r\n                        editButtonLoading={buttonLoading.edit}\r\n                    />\r\n                )}\r\n                {modalType === 'delete' && (\r\n                    <ConfirmWindow\r\n                        cancelDeleteProcess={cancelDeleteProcess}\r\n                        deleteStory={deleteStory}\r\n                        isLoading={buttonLoading.delete}\r\n                    />\r\n                )}\r\n            </Modal>\r\n            {alert.visible && (\r\n                <AlertMessage\r\n                    message={alert.message}\r\n                    handleClose={() =>\r\n                        setAlert({ visible: false, message: '' })\r\n                    }\r\n                />\r\n            )}\r\n            <VStack\r\n                style={{\r\n                    marginBottom: '30px',\r\n                    overflow: 'hidden',\r\n                    width: '100%',\r\n                }}\r\n                className=\"story-card\"\r\n                spacing={5}\r\n                direction={'column'}\r\n            >\r\n                <Stack direction={'column'} spacing={5}>\r\n                    <Stack direction={'column'} spacing={2}>\r\n                        <HStack spacing={5} justify={'space-between'}>\r\n                            <HStack>\r\n                                <Heading className=\"story-heading\" size={'lg'}>\r\n                                    {story.heading}\r\n                                </Heading>\r\n                                {story.type === 'private' ? (\r\n                                    <Badge\r\n                                        colorScheme=\"red\"\r\n                                        style={{ borderRadius: '5px' }}\r\n                                    >\r\n                                        private\r\n                                    </Badge>\r\n                                ) : (\r\n                                    <Badge\r\n                                        colorScheme=\"green\"\r\n                                        style={{ borderRadius: '5px' }}\r\n                                    >\r\n                                        public\r\n                                    </Badge>\r\n                                )}\r\n                            </HStack>\r\n                            {type === 'all' && (\r\n                                <div>\r\n                                    <p>\r\n                                        <small>by </small>\r\n                                        {story.creatorName}\r\n                                    </p>\r\n                                </div>\r\n                            )}\r\n                        </HStack>\r\n                        <small style={{ color: 'gray', fontSize: '15px' }}>\r\n                            {story.createdAt}\r\n                        </small>\r\n                    </Stack>\r\n                    <Divider />\r\n                    <Image\r\n                        className=\"story-img\"\r\n                        src={story.url}\r\n                        alt=\"cover image\"\r\n                    />\r\n                    <Divider />\r\n                    <p style={{ textAlign: 'left' }}>{story.content}</p>\r\n                    {type === 'user' && (\r\n                        <div>\r\n                            <HStack spacing={5}>\r\n                                <Button\r\n                                    colorScheme=\"blue\"\r\n                                    size=\"sm\"\r\n                                    onClick={() =>\r\n                                        handleEditStory(story.storyId)\r\n                                    }\r\n                                >\r\n                                    Edit Story\r\n                                </Button>\r\n                                <Button\r\n                                    colorScheme=\"red\"\r\n                                    size=\"sm\"\r\n                                    onClick={() =>\r\n                                        handleDeleteStory(story.storyId)\r\n                                    }\r\n                                >\r\n                                    Delete Story\r\n                                </Button>\r\n                            </HStack>\r\n                        </div>\r\n                    )}\r\n                    {type === 'all' && (\r\n                        <div>\r\n                            <Divider />\r\n                            <HStack style={{ marginTop: '10px' }}>\r\n                                <p>{like.count}</p>\r\n                                <Button\r\n                                    onClick={handleLike}\r\n                                    colorScheme={\r\n                                        like.state === 'Like' ? 'blue' : 'red'\r\n                                    }\r\n                                >\r\n                                    <HStack>\r\n                                        {like.state === 'Like' ? (\r\n                                            <AiFillLike color=\"white\" />\r\n                                        ) : (\r\n                                            <AiFillDislike color=\"white\" />\r\n                                        )}\r\n                                        <p>{like.state}</p>\r\n                                    </HStack>\r\n                                </Button>\r\n                            </HStack>\r\n                        </div>\r\n                    )}\r\n                </Stack>\r\n            </VStack>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport {\r\n    Stack,\r\n    Heading,\r\n    HStack,\r\n    Button,\r\n    Avatar,\r\n    Popover,\r\n    PopoverTrigger,\r\n    Portal,\r\n    PopoverContent,\r\n    PopoverArrow,\r\n    PopoverHeader,\r\n    PopoverCloseButton,\r\n    PopoverBody,\r\n    useMediaQuery,\r\n} from '@chakra-ui/react';\r\nimport { BarLoader } from 'react-spinners';\r\nimport { signOut } from 'firebase/auth';\r\nimport { useLocation, useNavigate, NavLink } from 'react-router-dom';\r\nimport { auth } from '../server';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { AiOutlineMenu, AiFillCloseCircle } from 'react-icons/ai';\r\n\r\nconst Navbar = ({ userData }) => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const [user, loading, error] = useAuthState(auth);\r\n    const [isResponsive] = useMediaQuery('(min-width: 1000px)');\r\n    const [showNavbarModalInMobile, setShowNavbarModalInMobile] =\r\n        useState(false);\r\n\r\n    // useEffect(() => {\r\n    //     // if (!user) {\r\n    //     //     if (location.pathname === '/home') navigate('/login');\r\n    //     //     if (loading.pathname === '/feed') navigate('/login');\r\n    //     // }\r\n    //     console.log(location.pathname);\r\n    // }, [user]);\r\n\r\n    if (loading) return <BarLoader />;\r\n\r\n    const handleSignOut = async () => {\r\n        await signOut(auth);\r\n        navigate('/login', { replace: true });\r\n    };\r\n\r\n    const handleResponsiveMenuBar = {\r\n        openMenu: () => setShowNavbarModalInMobile(true),\r\n        closeMenu: () => setShowNavbarModalInMobile(false),\r\n    };\r\n\r\n    return (\r\n        <div className=\"navbar\">\r\n            <HStack justify={'space-between'}>\r\n                <NavLink to={'/home'}>\r\n                    {' '}\r\n                    <Heading className=\"navbar-heading\">StoryShare</Heading>\r\n                </NavLink>\r\n                {isResponsive ? (\r\n                    <div>\r\n                        <HStack spacing={10}>\r\n                            <NavLink\r\n                                to={'/home'}\r\n                                className={\r\n                                    (location.pathname === '/home' &&\r\n                                        'navbar-active') +\r\n                                    ' ' +\r\n                                    'navbar-link'\r\n                                }\r\n                            >\r\n                                Your Stories\r\n                            </NavLink>\r\n                            <NavLink\r\n                                to={'/feed'}\r\n                                className={\r\n                                    (location.pathname === '/feed' &&\r\n                                        'navbar-active') +\r\n                                    ' ' +\r\n                                    'navbar-link'\r\n                                }\r\n                            >\r\n                                Feed\r\n                            </NavLink>\r\n                            <Popover>\r\n                                <PopoverTrigger>\r\n                                    <HStack spacing={5} className=\"navbar-user\">\r\n                                        <p>{userData.name}</p>\r\n                                        <Avatar src=\"https://image.shutterstock.com/image-vector/young-man-face-cartoon-260nw-1224888760.jpg\" />\r\n                                    </HStack>\r\n                                </PopoverTrigger>\r\n                                <Portal>\r\n                                    <PopoverContent className=\"navbar-user-portal\">\r\n                                        <PopoverArrow />\r\n                                        <PopoverHeader>\r\n                                            Your Profile\r\n                                        </PopoverHeader>\r\n                                        <PopoverCloseButton />\r\n                                        <PopoverBody>\r\n                                            <HStack>\r\n                                                <p>{userData.email}</p>\r\n                                                <Button\r\n                                                    colorScheme=\"orange\"\r\n                                                    onClick={handleSignOut}\r\n                                                >\r\n                                                    Sign Out\r\n                                                </Button>\r\n                                            </HStack>\r\n                                        </PopoverBody>\r\n                                    </PopoverContent>\r\n                                </Portal>\r\n                            </Popover>\r\n                        </HStack>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        {showNavbarModalInMobile ? (\r\n                            <AiFillCloseCircle\r\n                                onClick={handleResponsiveMenuBar.closeMenu}\r\n                            />\r\n                        ) : (\r\n                            <AiOutlineMenu\r\n                                onClick={handleResponsiveMenuBar.openMenu}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </HStack>\r\n            {showNavbarModalInMobile && (\r\n                <div className=\"responsive-navbar\">\r\n                    <Stack spacing={5}>\r\n                        <NavLink\r\n                            to={'/home'}\r\n                            className={\r\n                                (location.pathname === '/home' &&\r\n                                    'navbar-active') +\r\n                                ' ' +\r\n                                'navbar-link'\r\n                            }\r\n                        >\r\n                            Your Stories\r\n                        </NavLink>\r\n                        <NavLink\r\n                            to={'/feed'}\r\n                            className={\r\n                                (location.pathname === '/feed' &&\r\n                                    'navbar-active') +\r\n                                ' ' +\r\n                                'navbar-link'\r\n                            }\r\n                        >\r\n                            Feed\r\n                        </NavLink>\r\n                        <NavLink\r\n                            to=\"/profile\"\r\n                            className={\r\n                                (location.pathname === '/profile' &&\r\n                                    'navbar-active') +\r\n                                ' ' +\r\n                                'navbar-link'\r\n                            }\r\n                        >\r\n                            Your Profile\r\n                        </NavLink>\r\n                        {/* <Popover>\r\n                            <PopoverTrigger>\r\n                                <HStack spacing={5} className=\"navbar-user\">\r\n                                    <p>{userData.name}</p>\r\n                                    <Avatar src=\"https://image.shutterstock.com/image-vector/young-man-face-cartoon-260nw-1224888760.jpg\" />\r\n                                </HStack>\r\n                            </PopoverTrigger>\r\n                            <Portal>\r\n                                <PopoverContent className=\"navbar-user-portal\">\r\n                                    <PopoverArrow />\r\n                                    <PopoverHeader>Your Profile</PopoverHeader>\r\n                                    <PopoverCloseButton />\r\n                                    <PopoverBody>\r\n                                        <HStack>\r\n                                            <p>{userData.email}</p>\r\n                                            <Button\r\n                                                colorScheme=\"orange\"\r\n                                                onClick={handleSignOut}\r\n                                            >\r\n                                                Sign Out\r\n                                            </Button>\r\n                                        </HStack>\r\n                                    </PopoverBody>\r\n                                </PopoverContent>\r\n                            </Portal>\r\n                        </Popover> */}\r\n                        <Button colorScheme=\"orange\" onClick={handleSignOut}>\r\n                            Sign Out\r\n                        </Button>\r\n                    </Stack>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import { initializeApp } from 'firebase/app';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGE_SENDER_ID,\r\n    appId: process.env.REACT_APP_API_ID,\r\n};\r\n\r\nexport const app = initializeApp(firebaseConfig);\r\n","import { createUserWithEmailAndPassword, getAuth } from 'firebase/auth';\r\nimport { addDoc, collection, getFirestore } from 'firebase/firestore';\r\nimport { app } from '../firebase.config';\r\n\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\n\r\nexport const registerUserWithEmailAndPassword = async data => {\r\n    try {\r\n        const { firstName, lastName, email, password, checkbox } = data;\r\n        const response = await createUserWithEmailAndPassword(\r\n            auth,\r\n            email,\r\n            password\r\n        );\r\n        const user = response.user;\r\n        await addDoc(collection(db, 'users'), {\r\n            _id: user.uid,\r\n            name: firstName + ' ' + lastName,\r\n            firstName,\r\n            lastName,\r\n            email,\r\n            authType: 'e&p',\r\n            termsAcceptation: checkbox,\r\n        });\r\n    } catch (error) {\r\n        console.log('error', error.message);\r\n        return error.message;\r\n    }\r\n};\r\n\r\nexport const stringDate = type => {\r\n    const dateObj = new Date();\r\n    const month = dateObj.getUTCMonth();\r\n    const day = dateObj.getUTCDate();\r\n    const year = dateObj.getUTCFullYear();\r\n    const monthArray = [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec',\r\n    ];\r\n    return `${type === 'c' ? 'created' : 'updated'} at ${day} ${\r\n        monthArray[month]\r\n    }, ${year}`;\r\n};\r\n"],"names":["message","handleClose","style","marginTop","borderRadius","status","mr","onClick","position","right","top","story","newStory","setNewStory","submitEditStory","editButtonLoading","useState","isAllField","setIsAllField","useEffect","heading","content","type","isRequired","htmlFor","id","placeholder","value","onChange","e","target","as","defaultValue","spacing","isLoading","disabled","colorScheme","variant","cancelDeleteProcess","deleteStory","className","Modal","state","useContext","RootContext","count","like","setLike","visible","alert","setAlert","edit","delete","buttonLoading","setButtonLoading","likes","handleLike","fetchStoryDocumentId","storyId","updateStoryId","updateDoc","doc","db","getDocs","query","collection","where","docs","deleteStoryId","console","log","deleteDoc","filterStories","rootStories","filter","item","setRootStories","setModalIsOpen","editStoryId","object","createdAt","stringDate","timestamp","Date","now","map","useMediaQuery","isResponsive","modalIsOpen","modalType","setModalType","customStyles","width","left","bottom","marginRight","transform","overlay","backgroundColor","isOpen","onRequestClose","contentLabel","AlertMessage","marginBottom","overflow","direction","justify","size","creatorName","color","fontSize","src","url","alt","textAlign","userData","navigate","useNavigate","location","useLocation","useAuthState","auth","loading","showNavbarModalInMobile","setShowNavbarModalInMobile","BarLoader","handleSignOut","signOut","replace","handleResponsiveMenuBar","openMenu","closeMenu","to","pathname","name","email","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","getFirestore","registerUserWithEmailAndPassword","data","firstName","lastName","password","checkbox","createUserWithEmailAndPassword","response","user","addDoc","_id","uid","authType","termsAcceptation","dateObj","month","getUTCMonth","day","getUTCDate","year","getUTCFullYear"],"sourceRoot":""}