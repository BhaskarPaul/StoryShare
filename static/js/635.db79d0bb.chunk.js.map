{"version":3,"file":"static/js/635.db79d0bb.chunk.js","mappings":"mQAgEA,UAvDa,WACT,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAA+BC,EAAAA,EAAAA,IAAaC,EAAAA,IAA5C,eAAOC,EAAP,KACA,GADA,WAC4CC,EAAAA,EAAAA,UAAS,KAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAAuBC,EAAAA,EAAAA,IAAc,uBAA9BC,GAAP,eAEMC,EAAmB,mCAAG,uGACLC,EAAAA,EAAAA,KACfC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,YAAYC,EAAAA,EAAAA,IAAM,OAAQ,KAAM,YAFjC,OAClBC,EADkB,OAIpBC,EAAa,GACjBD,EAAKE,SAAQ,SAAAC,GAAG,OAAIF,EAAWG,KAAKD,EAAIE,WAExChB,EAAkB,GAAD,OAAKY,IAPE,2CAAH,sDAUzBK,EAAAA,EAAAA,YAAU,WACDpB,GAAMJ,EAAS,UACpBY,MACD,CAACR,KAEJoB,EAAAA,EAAAA,YAAU,WACNC,MACD,IAEH,IAAMA,EAAa,mCAAG,gHAEKZ,EAAAA,EAAAA,KACfC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,UAAUC,EAAAA,EAAAA,IAAM,MAAO,KAAR,OAAcb,QAAd,IAAcA,OAAd,EAAcA,EAAMsB,OAH9C,cAERR,EAFQ,gBAKKA,EAAKA,KAAK,GAAGK,OALlB,OAKRA,EALQ,OAMdd,EAAYc,GANE,kDASdI,QAAQC,MAAR,MATc,0DAAH,qDAanB,OACI,4BACI,SAAC,IAAD,CAAQpB,SAAUA,KAClB,SAAC,KAAD,CAAMqB,gBAAiBlB,GAAgB,iBAAkBmB,IAAK,EAA9D,SACKxB,EACIyB,QAAO,SAAAC,GAAK,OAAIA,EAAMC,MAAQ7B,EAAKsB,OACnCQ,KAAI,SAACF,EAAOG,GAAR,OACD,SAAC,KAAD,CAAoBC,QAASzB,GAAgB,EAA7C,UACI,SAAC,IAAD,CAAMqB,MAAOA,EAAOK,KAAM,SADfF","sources":["components/Feed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Navbar from './Navbar';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { auth, db } from '../server';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { query, collection, where, getDocs } from 'firebase/firestore';\r\nimport { Grid, GridItem, useMediaQuery } from '@chakra-ui/react';\r\nimport Card from './Card';\r\n\r\nconst Feed = () => {\r\n    const navigate = useNavigate();\r\n    const [user, loading, error] = useAuthState(auth);\r\n    const [allPublicStory, setAllPublicStory] = useState([]);\r\n    const [userData, setUserData] = useState({});\r\n    const [isResponsive] = useMediaQuery('(min-width: 1000px)');\r\n\r\n    const fetchAllPublicStory = async () => {\r\n        const docs = await getDocs(\r\n            query(collection(db, 'stories'), where('type', '==', 'public'))\r\n        );\r\n        let allStories = [];\r\n        docs.forEach(doc => allStories.push(doc.data()));\r\n        // allStories.sort((a, b) => b.timestamp - a.timestamp);\r\n        setAllPublicStory([...allStories]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!user) navigate('/login');\r\n        fetchAllPublicStory();\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        fetchUserData();\r\n    }, []);\r\n\r\n    const fetchUserData = async () => {\r\n        try {\r\n            const docs = await getDocs(\r\n                query(collection(db, 'users'), where('_id', '==', user?.uid))\r\n            );\r\n            const data = await docs.docs[0].data();\r\n            setUserData(data);\r\n            // user.displayName = userData.name;\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Navbar userData={userData} />\r\n            <Grid templateColumns={isResponsive && 'repeat(2, 1fr)'} gap={5}>\r\n                {allPublicStory\r\n                    .filter(story => story._id !== user.uid)\r\n                    .map((story, key) => (\r\n                        <GridItem key={key} colSpan={isResponsive && 1}>\r\n                            <Card story={story} type={'all'} />\r\n                        </GridItem>\r\n                    ))}\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Feed;\r\n"],"names":["navigate","useNavigate","useAuthState","auth","user","useState","allPublicStory","setAllPublicStory","userData","setUserData","useMediaQuery","isResponsive","fetchAllPublicStory","getDocs","query","collection","db","where","docs","allStories","forEach","doc","push","data","useEffect","fetchUserData","uid","console","error","templateColumns","gap","filter","story","_id","map","key","colSpan","type"],"sourceRoot":""}