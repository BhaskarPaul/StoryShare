{"version":3,"file":"static/js/999.fe8809a9.chunk.js","mappings":"wZAwCA,EA/BmB,SAAAA,GACf,OAAgCC,EAAAA,EAAAA,UAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAsBJ,EAAAA,EAAAA,UAAS,MAA/B,eAAOK,EAAP,KAAYC,EAAZ,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,GAAUC,EAAAA,EAAAA,IAAWC,EAAAA,GACrBC,GAAaC,EAAAA,EAAAA,IAAIJ,EAAS,UAAYT,EAAKc,MAC3CC,GAAaC,EAAAA,EAAAA,IAAqBJ,EAAYZ,GAEpDe,EAAWE,GACP,iBACA,SAAAC,GACI,IAAIC,EACCD,EAASE,iBAAmBF,EAASG,WAAc,IACxDlB,EAAYgB,MAEhB,SAAAf,GACIC,EAASD,MAEb,YACIkB,EAAAA,EAAAA,IAAeP,EAAWG,SAASL,KAAKU,MAAK,SAAAC,GAAW,OACpDjB,EAAOiB,WAIpB,CAACxB,IAEG,CAAEE,SAAAA,EAAUE,MAAAA,EAAOE,IAAAA,I,SCX9B,EAtBoB,SAAC,GAAwC,IAAtCN,EAAqC,EAArCA,KAAMyB,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACzC,EAAiCC,EAAW5B,GAApCE,EAAR,EAAQA,SAAUI,EAAlB,EAAkBA,IAAKF,EAAvB,EAAuBA,MAWvB,OATAI,EAAAA,EAAAA,YAAU,WACFF,IACAmB,EAAQ,MACRE,GAAS,kBAAKD,GAAN,IAAapB,IAAKA,MAG9BuB,QAAQC,IAAI1B,KACb,CAACE,EAAKmB,EAASrB,KAGd,0BACI,SAAC,KAAD,CACI2B,MAAO,CAAEC,aAAc,MAAOC,UAAW,QACzCC,MAAOhC,O,UCmLvB,EA/KqB,SAAC,GAAqB,IAAnBiC,EAAkB,EAAlBA,YACdC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,YAAWC,EAAAA,GACzB,GAA0BvC,EAAAA,EAAAA,UAAS,CAC/BwC,QAAS,GACTC,QAAS,GACTC,KAAM,SACNrC,IAAK,KAJT,eAAOoB,EAAP,KAAcC,EAAd,KAMA,GAAoC1B,EAAAA,EAAAA,WAAS,GAA7C,eAAO2C,EAAP,KAAmBC,EAAnB,KACA,GAA+BC,EAAAA,EAAAA,IAAaC,EAAAA,IAA5C,eAAOC,EAAP,KACA,GADA,WAC0B/C,EAAAA,EAAAA,UAAS,CAAEgD,SAAS,EAAOC,QAAS,MAA9D,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCnD,EAAAA,EAAAA,WAAS,GAA3C,eAAOoD,EAAP,KAAkBC,EAAlB,KACA,GAAwBrD,EAAAA,EAAAA,UAAS,MAAjC,eAAOD,EAAP,KAAayB,EAAb,KACA,GAAuB8B,EAAAA,EAAAA,IAAc,uBAA9BC,GAAP,eACA,GAAgDvD,EAAAA,EAAAA,WAAS,GAAzD,eAAOwD,GAAP,KAAyBC,GAAzB,MAEAlD,EAAAA,EAAAA,YAAU,WACgB,KAAlBkB,EAAMe,SAAoC,KAAlBf,EAAMgB,SAAgC,KAAdhB,EAAMpB,IACtDuC,GAAc,GACbA,GAAc,KACpB,CAACnB,KAEJlB,EAAAA,EAAAA,YAAU,WACDwC,GAAMZ,EAAS,SAAU,CAAEuB,SAAS,MAE1C,CAACX,KAEJxC,EAAAA,EAAAA,YAAU,WACFgD,GAAcE,IAAoB,KACvC,CAACF,IAEJ,IAAMI,GAAW,mCAAG,2FAEhBN,GAAa,GAFG,SAINO,GAJM,gBAKRC,IAAKd,EAAKe,IACVC,SAASC,EAAAA,EAAAA,KACT9B,YAAAA,GACGT,GARK,IASRwC,MAAO,EACPC,MAAO,EACPC,WAAWC,EAAAA,EAAAA,IAAW,KACtBC,UAAWC,KAAKC,QAZR,UAcNC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,WAAYd,GAd5B,OAeZvB,EAAMsC,eAAN,CAAsBf,GAAtB,eAAiCvB,EAAMuC,eACvClD,EAAS,CAAEc,QAAS,GAAIC,QAAS,GAAIC,KAAM,WAC3CW,GAAa,GAjBD,kDAmBZA,GAAa,GACbF,EAAS,CAAEH,SAAS,EAAMC,QAAS,KAAMA,UACzCrB,QAAQC,IAAR,MArBY,0DAAH,qDA0CjB,OACI,iCACM0B,IACE,UAAC,KAAD,CACIsB,WAAY,SACZC,eAAgB,SAChBC,UAAU,uBACVC,QAViB,kBAC7BvB,IAAqBD,KAUT1B,MAAO,CAAEmD,aAAczB,IAAoB,QAL/C,WAOI,uBACKA,GACK,sBACA,6BAERA,KACE,2BACI,SAAC,MAAD,SAKfA,KACG,iBAAKuB,UAAU,eAAf,UACK7B,EAAMF,UACH,SAACkC,EAAA,EAAD,CACIjC,QAASC,EAAMD,QACfkC,YAAa,kBACThC,EAAS,CAAEH,SAAS,EAAOC,QAAS,SAIhD,UAAC,KAAD,CAAamC,YAAU,EAAvB,WACI,SAAC,KAAD,CAAWC,QAAQ,gBAAnB,sBACA,SAAC,KAAD,CACIC,GAAG,gBACH5C,KAAK,OACL6C,YAAY,wBACZtD,MAAOR,EAAMe,QACbgD,SAAU,SAAAC,GAAC,OACP/D,GAAS,kBAAKD,GAAN,IAAae,QAASiD,EAAEC,OAAOzD,aAG/C,SAAC,KAAD,CAAWoD,QAAQ,gBAAnB,sBACA,SAAC,IAAD,CACIE,YAAY,wBACZtD,MAAOR,EAAMgB,QACb+C,SAAU,SAAAC,GAAC,OACP/D,GAAS,kBAAKD,GAAN,IAAagB,QAASgD,EAAEC,OAAOzD,aAG/C,SAAC,KAAD,CAAWoD,QAAQ,QAAnB,iCAGA,SAAC,KAAD,CACIC,GAAG,QACH5C,KAAK,OACL6C,YAAY,uBACZC,SAAU,SAAAC,GAAC,OA3Ef,SAAA1F,GAChB,IACQ2C,EAAS3C,EAAT2C,KACJ3C,GAFU,CAAC,aAAc,YAAa,aAExB4F,SAASjD,GACvBlB,EAAQzB,IAERoD,EAAS,CACLH,SAAS,EACTC,QAAS,0CAEbzB,EAAQ,OAiEuBoE,CAAYH,EAAEC,OAAOG,MAAM,OAE7C9F,IACG,SAAC,EAAD,CACIA,KAAMA,EACNyB,QAASA,EACTC,MAAOA,EACPC,SAAUA,KAGlB,SAAC,KAAD,CAAWoE,GAAG,SAAd,wCAGA,SAAC,KAAD,CACIC,aAActE,EAAMiB,KACpB8C,SAAU,SAAAvD,GAAK,OACXP,GAAS,kBAAKD,GAAN,IAAaiB,KAAMT,MAHnC,UAMI,UAAC,KAAD,CAAQ+D,QAAQ,OAAhB,WACI,SAAC,KAAD,CAAO/D,MAAM,SAAb,qBACA,SAAC,KAAD,CAAOA,MAAM,UAAb,2BAGR,SAAC,KAAD,4CAGA,SAAC,KAAD,CACIgE,UAAW7C,EACX8C,UAAWvD,EACXwD,YAAY,OACZC,QAAQ,QACRpB,QAASrB,GALb,oC,oBCvHxB,EAtDsB,WAClB,IAAMxB,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,YAAWC,EAAAA,GACzB,GAA+BM,EAAAA,EAAAA,IAAaC,EAAAA,IAA5C,eAAOC,EAAP,KACA,GADA,WACkD/C,EAAAA,EAAAA,UAAS,QAA3D,eAAOqG,EAAP,KAA0BC,EAA1B,KACA,GAAuBhD,EAAAA,EAAAA,IAAc,uBAA9BC,GAAP,eAEMgD,EAAc,mCAAG,uGACAC,EAAAA,EAAAA,KACfC,EAAAA,EAAAA,KAAMhC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,YAAYgC,EAAAA,EAAAA,IAAM,MAAO,KAAM3D,EAAKe,OAF1C,OACb6C,EADa,OAIfC,EAAa,GACjBD,EAAKE,SAAQ,SAAAC,GAAG,OAAIF,EAAWG,KAAKD,EAAIE,WACxCJ,EAAWK,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE9C,UAAY6C,EAAE7C,aAC1ChC,EAAMsC,eAAN,UAAyBiC,IAPN,2CAAH,qDAkBpB,OARArG,EAAAA,EAAAA,YAAU,WACDwC,GAAMZ,EAAS,SAAU,CAAEuB,SAAS,MAC1C,CAACX,KAEJxC,EAAAA,EAAAA,YAAU,WACNgG,MACD,KAGC,4BACI,UAAC,KAAD,CACIhB,YAAY,uBACZC,SAAU,SAAAC,GAAC,OAAIa,EAAqBb,EAAEC,OAAOzD,QAC7CH,MAAO,CACHmD,aAAc,OACdjD,WAAYuB,GAAgB,QALpC,WAQI,mBAAQtB,MAAM,SAAd,qBACA,mBAAQA,MAAM,UAAd,wBAEHI,EAAMuC,YACFwC,QAAO,SAAA3F,GACJ,MAC0B,WAAtB4E,GACsB,YAAtBA,EAEO5E,EAAMiB,OAAS2D,EACnB5E,KAEV4F,KAAI,SAAC5F,EAAO6F,GAAR,OACD,SAACC,EAAA,EAAD,CAAgB9F,MAAOA,EAAOiB,KAAM,QAAzB4E,U,oBC+B/B,EA5Ea,WACT,IAAMnF,GAAWC,EAAAA,EAAAA,MACjB,GAA0BpC,EAAAA,EAAAA,UAAS,CAAEiD,QAAS,GAAID,SAAS,IAA3D,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAgCnD,EAAAA,EAAAA,UAAS,IAAzC,eAAOwH,EAAP,KAAiBC,EAAjB,KACA,GAA+B5E,EAAAA,EAAAA,IAAaC,EAAAA,IAA5C,eAAOC,EAAP,KAAa2E,EAAb,KACA,GADA,MACuBpE,EAAAA,EAAAA,IAAc,wBAA9BC,GAAP,gBAEAhD,EAAAA,EAAAA,YAAU,WACDwC,GAAMZ,EAAS,YACrB,CAACY,KAEJxC,EAAAA,EAAAA,YAAU,WACNoH,MACD,IAMH,IAAMA,EAAa,mCAAG,gHAEKnB,EAAAA,EAAAA,KACfC,EAAAA,EAAAA,KAAMhC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,UAAUgC,EAAAA,EAAAA,IAAM,MAAO,KAAR,OAAc3D,QAAd,IAAcA,OAAd,EAAcA,EAAMe,OAH9C,cAER6C,EAFQ,gBAKKA,EAAKA,KAAK,GAAGK,OALlB,OAKRA,EALQ,OAMdS,EAAYT,GANE,kDASdpF,QAAQzB,MAAR,MATc,0DAAH,qDAanB,OAAIuH,GAAgB,SAAC,EAAAE,UAAD,KAGhB,iBAAK9F,MAAO,CAAE+F,SAAU,UAAxB,UACK3E,EAAMF,UACH,SAACkC,EAAA,EAAD,CACIjC,QAASC,EAAMD,QACfkC,YAAa,kBACThC,EAAS,CAAEH,SAAS,EAAOC,QAAS,SAIhD,SAAC6E,EAAA,EAAD,CAAQN,SAAUA,KAClB,gBAAKzC,UAAU,aAAf,SACKxB,GACG,UAAC,KAAD,CACIwE,gBAAiBxE,GAAgB,iBACjCyE,IAAK,EAFT,WAII,SAAC,KAAD,CAAUC,QAAS,EAAnB,UACI,SAAC,EAAD,OAEJ,SAAC,KAAD,CAAUA,QAAS,EAAnB,UACI,SAAC,EAAD,CAAc/F,YAAasF,EAAS3G,aAI5C,UAAC,KAAD,CAEImH,IAAK,EAFT,WAII,SAAC,KAAD,WACI,SAAC,EAAD,CAAc9F,YAAasF,EAAS3G,UAExC,SAAC,KAAD,WACI,SAAC,EAAD","sources":["hooks/useStorage.js","components/ProgressBar.js","components/AddUserStory.js","components/ShowUserStory.js","components/Home.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { app } from '../firebase.config';\r\nimport {\r\n    getDownloadURL,\r\n    getStorage,\r\n    ref,\r\n    uploadBytesResumable,\r\n} from 'firebase/storage';\r\n\r\nconst useStorage = file => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const storage = getStorage(app);\r\n        const storageRef = ref(storage, 'images/' + file.name);\r\n        const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n        uploadTask.on(\r\n            'state_changed',\r\n            snapshot => {\r\n                let percentage =\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                setProgress(percentage);\r\n            },\r\n            error => {\r\n                setError(error);\r\n            },\r\n            () => {\r\n                getDownloadURL(uploadTask.snapshot.ref).then(downloadUrl =>\r\n                    setUrl(downloadUrl)\r\n                );\r\n            }\r\n        );\r\n    }, [file]);\r\n\r\n    return { progress, error, url };\r\n};\r\n\r\nexport default useStorage;\r\n","import React, { useEffect } from 'react';\r\nimport { Progress } from '@chakra-ui/react';\r\nimport useStorage from '../hooks/useStorage';\r\n\r\nconst ProgressBar = ({ file, setFile, story, setStory }) => {\r\n    const { progress, url, error } = useStorage(file);\r\n\r\n    useEffect(() => {\r\n        if (url) {\r\n            setFile(null);\r\n            setStory({ ...story, url: url });\r\n        }\r\n\r\n        console.log(error);\r\n    }, [url, setFile, error]);\r\n\r\n    return (\r\n        <div>\r\n            <Progress\r\n                style={{ borderRadius: '5px', marginTop: '10px' }}\r\n                value={progress}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    FormControl,\r\n    Input,\r\n    FormHelperText,\r\n    FormLabel,\r\n    HStack,\r\n    Radio,\r\n    RadioGroup,\r\n    Textarea,\r\n    Button,\r\n    useMediaQuery,\r\n} from '@chakra-ui/react';\r\nimport '../App.css';\r\nimport { auth, db, stringDate } from '../server';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { addDoc, collection } from 'firebase/firestore';\r\nimport AlertMessage from './AlertMessage';\r\nimport { RootContext } from '../context';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport ProgressBar from './ProgressBar';\r\nimport { AiFillFileAdd } from 'react-icons/ai';\r\n\r\nconst AddUserStory = ({ creatorName }) => {\r\n    const navigate = useNavigate();\r\n    const state = useContext(RootContext);\r\n    const [story, setStory] = useState({\r\n        heading: '',\r\n        content: '',\r\n        type: 'public',\r\n        url: '',\r\n    });\r\n    const [isAllField, setIsAllField] = useState(false);\r\n    const [user, loading, error] = useAuthState(auth);\r\n    const [alert, setAlert] = useState({ visible: false, message: '' });\r\n    const [isloading, setIsloading] = useState(false);\r\n    const [file, setFile] = useState(null);\r\n    const [isResponsive] = useMediaQuery('(min-width: 1000px)');\r\n    const [showAddUserStory, setShowAddUserStory] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (story.heading !== '' && story.content !== '' && story.url !== '')\r\n            setIsAllField(true);\r\n        else setIsAllField(false);\r\n    }, [story]);\r\n\r\n    useEffect(() => {\r\n        if (!user) navigate('/login', { replace: true });\r\n        // console.log(user);\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        if (isResponsive) setShowAddUserStory(true);\r\n    }, [isResponsive]);\r\n\r\n    const createStory = async () => {\r\n        // console.log(user);\r\n        setIsloading(true);\r\n        try {\r\n            const object = {\r\n                _id: user.uid,\r\n                storyId: uuidv4(),\r\n                creatorName,\r\n                ...story,\r\n                likes: 0,\r\n                views: 0,\r\n                createdAt: stringDate('c'),\r\n                timestamp: Date.now(),\r\n            };\r\n            await addDoc(collection(db, 'stories'), object);\r\n            state.setRootStories([object, ...state.rootStories]);\r\n            setStory({ heading: '', content: '', type: 'public' });\r\n            setIsloading(false);\r\n        } catch (error) {\r\n            setIsloading(false);\r\n            setAlert({ visible: true, message: error.message });\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const uploadImage = file => {\r\n        const types = ['image/jpeg', 'image/jpg', 'image/png'];\r\n        const { type } = file;\r\n        if (file && types.includes(type)) {\r\n            setFile(file);\r\n        } else {\r\n            setAlert({\r\n                visible: true,\r\n                message: 'Image file type should be jpeg or png',\r\n            });\r\n            setFile(null);\r\n        }\r\n    };\r\n\r\n    const openAddStoryInResponsive = () =>\r\n        setShowAddUserStory(!showAddUserStory);\r\n\r\n    return (\r\n        <>\r\n            {!isResponsive && (\r\n                <HStack\r\n                    alignItems={'center'}\r\n                    justifyContent={'center'}\r\n                    className=\"responsive-add-story\"\r\n                    onClick={openAddStoryInResponsive}\r\n                    style={{ marginBottom: showAddUserStory && '30px' }}\r\n                >\r\n                    <p>\r\n                        {showAddUserStory\r\n                            ? 'Click here to close'\r\n                            : 'Click here to add story'}\r\n                    </p>\r\n                    {!showAddUserStory && (\r\n                        <span>\r\n                            <AiFillFileAdd />\r\n                        </span>\r\n                    )}\r\n                </HStack>\r\n            )}\r\n            {showAddUserStory && (\r\n                <div className=\"create-story\">\r\n                    {alert.visible && (\r\n                        <AlertMessage\r\n                            message={alert.message}\r\n                            handleClose={() =>\r\n                                setAlert({ visible: false, message: '' })\r\n                            }\r\n                        />\r\n                    )}\r\n                    <FormControl isRequired>\r\n                        <FormLabel htmlFor=\"story-heading\">Heading</FormLabel>\r\n                        <Input\r\n                            id=\"story-heading\"\r\n                            type=\"text\"\r\n                            placeholder=\"Your story heading...\"\r\n                            value={story.heading}\r\n                            onChange={e =>\r\n                                setStory({ ...story, heading: e.target.value })\r\n                            }\r\n                        />\r\n                        <FormLabel htmlFor=\"story-content\">Content</FormLabel>\r\n                        <Textarea\r\n                            placeholder=\"Your story content...\"\r\n                            value={story.content}\r\n                            onChange={e =>\r\n                                setStory({ ...story, content: e.target.value })\r\n                            }\r\n                        />\r\n                        <FormLabel htmlFor=\"image\">\r\n                            Upload story image\r\n                        </FormLabel>\r\n                        <Input\r\n                            id=\"image\"\r\n                            type=\"file\"\r\n                            placeholder=\"upload image here...\"\r\n                            onChange={e => uploadImage(e.target.files[0])}\r\n                        />\r\n                        {file && (\r\n                            <ProgressBar\r\n                                file={file}\r\n                                setFile={setFile}\r\n                                story={story}\r\n                                setStory={setStory}\r\n                            />\r\n                        )}\r\n                        <FormLabel as=\"legend\">\r\n                            Select your story privacy\r\n                        </FormLabel>\r\n                        <RadioGroup\r\n                            defaultValue={story.type}\r\n                            onChange={value =>\r\n                                setStory({ ...story, type: value })\r\n                            }\r\n                        >\r\n                            <HStack spacing=\"24px\">\r\n                                <Radio value=\"public\">Public</Radio>\r\n                                <Radio value=\"private\">Private</Radio>\r\n                            </HStack>\r\n                        </RadioGroup>\r\n                        <FormHelperText>\r\n                            Default story type is Public\r\n                        </FormHelperText>\r\n                        <Button\r\n                            isLoading={isloading}\r\n                            disabled={!isAllField}\r\n                            colorScheme=\"teal\"\r\n                            variant=\"solid\"\r\n                            onClick={createStory}\r\n                        >\r\n                            Create story\r\n                        </Button>\r\n                    </FormControl>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddUserStory;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { getDocs, collection, query, where } from 'firebase/firestore';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { auth, db } from '../server';\r\nimport '../App.css';\r\nimport { Select, useMediaQuery } from '@chakra-ui/react';\r\nimport { RootContext } from '../context';\r\nimport Card from './Card';\r\n\r\nconst ShowUserStory = () => {\r\n    const navigate = useNavigate();\r\n    const state = useContext(RootContext);\r\n    const [user, loading, error] = useAuthState(auth);\r\n    const [selectOptionValue, setSelectOptionValue] = useState('all');\r\n    const [isResponsive] = useMediaQuery('(min-width: 1000px)');\r\n\r\n    const fetchUserStory = async () => {\r\n        const docs = await getDocs(\r\n            query(collection(db, 'stories'), where('_id', '==', user.uid))\r\n        );\r\n        let allStories = [];\r\n        docs.forEach(doc => allStories.push(doc.data()));\r\n        allStories.sort((a, b) => b.timestamp - a.timestamp);\r\n        state.setRootStories([...allStories]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!user) navigate('/login', { replace: true });\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        fetchUserStory();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Select\r\n                placeholder=\"Filter Stories (All)\"\r\n                onChange={e => setSelectOptionValue(e.target.value)}\r\n                style={{\r\n                    marginBottom: '30px',\r\n                    marginTop: !isResponsive && '30px',\r\n                }}\r\n            >\r\n                <option value=\"public\">Public</option>\r\n                <option value=\"private\">Private</option>\r\n            </Select>\r\n            {state.rootStories\r\n                .filter(story => {\r\n                    if (\r\n                        selectOptionValue === 'public' ||\r\n                        selectOptionValue === 'private'\r\n                    )\r\n                        return story.type === selectOptionValue;\r\n                    return story;\r\n                })\r\n                .map((story, key) => (\r\n                    <Card key={key} story={story} type={'user'} />\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShowUserStory;\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport { Grid, GridItem, useMediaQuery } from '@chakra-ui/react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AlertMessage from './AlertMessage';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport AddUserStory from './AddUserStory';\r\nimport ShowUserStory from './ShowUserStory';\r\nimport Navbar from './Navbar';\r\nimport { BarLoader } from 'react-spinners';\r\nimport { auth, db } from '../server';\r\nimport { collection, getDocs, query, where } from 'firebase/firestore';\r\n\r\nconst Home = () => {\r\n    const navigate = useNavigate();\r\n    const [alert, setAlert] = useState({ message: '', visible: false });\r\n    const [userData, setUserData] = useState({});\r\n    const [user, loading, error] = useAuthState(auth);\r\n    const [isResponsive] = useMediaQuery('(min-width: 1000px)');\r\n\r\n    useEffect(() => {\r\n        if (!user) navigate('/login');\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        fetchUserData();\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(isResponsive);\r\n    // }, [isResponsive]);\r\n\r\n    const fetchUserData = async () => {\r\n        try {\r\n            const docs = await getDocs(\r\n                query(collection(db, 'users'), where('_id', '==', user?.uid))\r\n            );\r\n            const data = await docs.docs[0].data();\r\n            setUserData(data);\r\n            // user.displayName = userData.name;\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    if (loading) return <BarLoader />;\r\n\r\n    return (\r\n        <div style={{ overflow: 'hidden' }}>\r\n            {alert.visible && (\r\n                <AlertMessage\r\n                    message={alert.message}\r\n                    handleClose={() =>\r\n                        setAlert({ visible: false, message: '' })\r\n                    }\r\n                />\r\n            )}\r\n            <Navbar userData={userData} />\r\n            <div className=\"story-body\">\r\n                {isResponsive ? (\r\n                    <Grid\r\n                        templateColumns={isResponsive && 'repeat(5, 1fr)'}\r\n                        gap={5}\r\n                    >\r\n                        <GridItem colSpan={3}>\r\n                            <ShowUserStory />\r\n                        </GridItem>\r\n                        <GridItem colSpan={2}>\r\n                            <AddUserStory creatorName={userData.name} />\r\n                        </GridItem>\r\n                    </Grid>\r\n                ) : (\r\n                    <Grid\r\n                        // templateColumns={isResponsive && 'repeat(5, 1fr)'}\r\n                        gap={5}\r\n                    >\r\n                        <GridItem>\r\n                            <AddUserStory creatorName={userData.name} />\r\n                        </GridItem>\r\n                        <GridItem>\r\n                            <ShowUserStory />\r\n                        </GridItem>\r\n                    </Grid>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storage","getStorage","app","storageRef","ref","name","uploadTask","uploadBytesResumable","on","snapshot","percentage","bytesTransferred","totalBytes","getDownloadURL","then","downloadUrl","setFile","story","setStory","useStorage","console","log","style","borderRadius","marginTop","value","creatorName","navigate","useNavigate","state","useContext","RootContext","heading","content","type","isAllField","setIsAllField","useAuthState","auth","user","visible","message","alert","setAlert","isloading","setIsloading","useMediaQuery","isResponsive","showAddUserStory","setShowAddUserStory","replace","createStory","object","_id","uid","storyId","uuidv4","likes","views","createdAt","stringDate","timestamp","Date","now","addDoc","collection","db","setRootStories","rootStories","alignItems","justifyContent","className","onClick","marginBottom","AlertMessage","handleClose","isRequired","htmlFor","id","placeholder","onChange","e","target","includes","uploadImage","files","as","defaultValue","spacing","isLoading","disabled","colorScheme","variant","selectOptionValue","setSelectOptionValue","fetchUserStory","getDocs","query","where","docs","allStories","forEach","doc","push","data","sort","a","b","filter","map","key","Card","userData","setUserData","loading","fetchUserData","BarLoader","overflow","Navbar","templateColumns","gap","colSpan"],"sourceRoot":""}